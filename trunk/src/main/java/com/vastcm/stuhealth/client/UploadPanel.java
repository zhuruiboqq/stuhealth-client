/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vastcm.stuhealth.client;

import java.awt.Dimension;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;

import net.miginfocom.swing.MigLayout;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import com.vastcm.stuhealth.client.entity.CheckResult;
import com.vastcm.stuhealth.client.entity.RptTbAge;
import com.vastcm.stuhealth.client.entity.RptTbGrade;
import com.vastcm.stuhealth.client.entity.RptZbAge;
import com.vastcm.stuhealth.client.entity.RptZbGrade;
import com.vastcm.stuhealth.client.entity.SchoolTreeNode;
import com.vastcm.stuhealth.client.entity.Student;
import com.vastcm.stuhealth.client.entity.UploadLog;
import com.vastcm.stuhealth.client.entity.core.CoreEntity;
import com.vastcm.stuhealth.client.entity.service.ICheckResultService;
import com.vastcm.stuhealth.client.entity.service.IRptTbAgeService;
import com.vastcm.stuhealth.client.entity.service.IRptTbGradeService;
import com.vastcm.stuhealth.client.entity.service.IRptZbAgeService;
import com.vastcm.stuhealth.client.entity.service.IRptZbGradeService;
import com.vastcm.stuhealth.client.entity.service.ISchoolTreeNodeService;
import com.vastcm.stuhealth.client.entity.service.IStudentService;
import com.vastcm.stuhealth.client.entity.service.IUploadLogService;
import com.vastcm.stuhealth.client.framework.Request;
import com.vastcm.stuhealth.client.framework.exception.ConnectionException;
import com.vastcm.stuhealth.client.framework.exception.RequestException;
import com.vastcm.stuhealth.client.framework.ui.KernelUI;
import com.vastcm.stuhealth.client.report.ui.FilterCommonAction;
import com.vastcm.stuhealth.client.utils.ExceptionUtils;
import com.vastcm.stuhealth.client.utils.biz.DownloadUploadHelper;
import com.vastcm.stuhealth.client.utils.biz.SchoolTermItem4UI;
import com.vastcm.stuhealth.framework.Response;
import com.vastcm.stuhealth.framework.ResponseUtils;
import com.vastcm.swing.selector.JSelectorBox;
import com.vastcm.swing.selector.event.PreChangeEvent;
import com.vastcm.swing.selector.event.PreChangeListener;

/**
 * 
 * @author house
 */
public class UploadPanel extends KernelUI {
	private static final long serialVersionUID = 1L;
	private Logger logger = LoggerFactory.getLogger(UploadPanel.class);
	private ProgressPanel progressPanel;

	/**
	 * Creates new form UploadPanel
	 */
	public UploadPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		centerPanel = new javax.swing.JPanel();
		//不允许显示班级，会影响过滤条件

		setPreferredSize(new Dimension(500, 180));
		setLayout(new java.awt.BorderLayout());
		centerPanel.setLayout(new MigLayout("", "[40px][200px][40px][200px]", "[25px][25px][23px]"));

		lblUser = new javax.swing.JLabel("用户名");
		txtUser = new javax.swing.JTextField();
		centerPanel.add(lblUser, "cell 0 0,grow");
		centerPanel.add(txtUser, "cell 1 0,grow");

		lblPassword = new javax.swing.JLabel("密码");
		txtPassword = new javax.swing.JPasswordField();
		centerPanel.add(lblPassword, "cell 2 0 ,alignx left,growy");
		centerPanel.add(txtPassword, "cell 3 0,grow");

		lblSchool = new javax.swing.JLabel("学校");
		selSchoolRange = FilterCommonAction.createSchoolRange();
		SchoolTreeSelectorPopupUI selectorPopupUI = (SchoolTreeSelectorPopupUI) selSchoolRange.getSelectorPopupUI();
		selectorPopupUI.setToolbarVisible(false);
		selectorPopupUI.setMergedSchoolVisible(false);
		selectorPopupUI.setIsDisplayClass(false);
		selectorPopupUI.displayUploadMsg();
		selectorPopupUI.displaySecCodeMsg();

		selSchoolRange.addPreChangeListener(new PreChangeListener() {

			@Override
			public void preChange(PreChangeEvent paramPreChangeEvent) {

				Object value = paramPreChangeEvent.getData();
				if (value == null)
					return;

				SchoolTreeNode schoolNode;
				if (value instanceof DefaultMutableTreeNode) {
					schoolNode = (SchoolTreeNode) ((DefaultMutableTreeNode) value).getUserObject();
				} else {
					schoolNode = (SchoolTreeNode) value;
				}
				if (schoolNode.getType() != SchoolTreeNode.TYPE_SCHOOL) {
					JOptionPane.showMessageDialog(UploadPanel.this, "请选择学校，不允许选择市或区！");
					return;
				}
				if (schoolNode.getName().indexOf("验证文件已过期") != -1) {
					JOptionPane.showMessageDialog(UploadPanel.this, "该学校的验证文件已过期，请重新导入！");
					paramPreChangeEvent.setResult(PreChangeEvent.E_FAIL);
				}
			}
		});

		centerPanel.add(lblSchool, "cell 0 1,grow");
		centerPanel.add(selSchoolRange, "cell 1 1,grow");

		JLabel lblSchoolTerm = new JLabel("学年");
		cmbSchoolTerm = FilterCommonAction.createSchoolTrem();
		lblSchoolTerm.setVisible(false);
		cmbSchoolTerm.setVisible(false);
		//		cmbSchoolTerm.setEnabled(false);
		centerPanel.add(lblSchoolTerm, "cell 2 1,grow");
		centerPanel.add(cmbSchoolTerm, "cell 3 1,grow");

		panel = new Panel();
		centerPanel.add(panel, "cell 0 2 4 1,alignx center");

		JButton btnUpload = new JButton("上  传");
		panel.add(btnUpload);
		btnUpload.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				btnUpload_ActionPerformed(e);
			}
		});

		add(centerPanel, java.awt.BorderLayout.CENTER);
	}// </editor-fold>//GEN-END:initComponents

	protected void writeUploadLog(String year, String term, String schoolCode, String user, Date date) {
		IUploadLogService uploadLogSrv = AppContext.getBean("uploadLogService", IUploadLogService.class);
		UploadLog log = new UploadLog();
		log.setYear(year);
		log.setTerm(term);
		log.setSchoolCode(schoolCode);
		log.setUploadUser(user);
		log.setUploadDate(new java.sql.Date(date.getTime()));
		uploadLogSrv.save(log);
	}

	private void btnUpload_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
		try {
			final String username = txtUser.getText().trim();
			if (username == null || username.isEmpty()) {
				JOptionPane.showMessageDialog(this, "请输入 用户名！");
				return;
			}
			char[] password = txtPassword.getPassword();
			if (password == null || password.length == 0) {
				JOptionPane.showMessageDialog(this, "请输入 密码！");
				return;
			}
			Object value = selSchoolRange.getValue();
			SchoolTreeNode schoolNode;
			if (value instanceof DefaultMutableTreeNode) {
				schoolNode = (SchoolTreeNode) ((DefaultMutableTreeNode) value).getUserObject();
			} else {
				schoolNode = (SchoolTreeNode) value;
			}

			if (schoolNode == null) {
				JOptionPane.showMessageDialog(this, "请选择学校！");
				return;
			}
			if (schoolNode.getType() != SchoolTreeNode.TYPE_SCHOOL) {
				JOptionPane.showMessageDialog(this, "请选择学校，不允许选择市或区！");
				return;
			}

			final String schoolBh = schoolNode.getCode();
			SchoolTermItem4UI schoolTermItem = (SchoolTermItem4UI) cmbSchoolTerm.getSelectedItem();
			final String year = String.valueOf(schoolTermItem.getYear());
			final String term = String.valueOf(schoolTermItem.getTerm());
			final String schoolName = schoolNode.getName();

			DownloadUploadHelper.checkAuth(this, username, password, schoolBh);
			//            final String sessionId = DownloadUploadHelper.checkAuth(this, username, password, schoolBh);
			//			boolean t = true;
			//			if (t) {
			//				return;
			//			}

			if (DownloadUploadHelper.isCheckResultExistence(schoolBh, year)) {
				int confirm = JOptionPane.showConfirmDialog(this, "该校本学年已上传过数据，请确定是否重新上传？", "确认", JOptionPane.YES_NO_OPTION);
				if (confirm != JOptionPane.OK_OPTION) {
					return;
				}
			}
			Request req2 = new Request("/DeleteCheckResult");
			//                req2.setParam("sessionId", sessionId);
			req2.setParam("year", year); // String.valueOf(GlobalVariables.getGlobalVariables().getYear()));
			req2.setParam("schoolBh", schoolBh);
			Response res2 = req2.send();
			logger.info(res2.getRetMsg());

			logger.info("schoolBh=" + schoolBh + ", schoolName=" + schoolNode.getName() + ", year=" + year);

			//                  progressPanel  = new ProgressPanel((JFrame)SwingUtilities.getWindowAncestor(this));
			progressPanel = new ProgressPanel(null);
			progressPanel.setProgressKeeper(new Runnable() {

				@Override
				public void run() {
					try {
						Request request = new Request("/UploadBySchool");
						request.setParam("year", year);
						request.setParam("schoolBh", schoolBh);
						request.setParam("term", term);

						StringBuilder whereSql = new StringBuilder();
						whereSql.append("where longNumber like '%").append(schoolBh).append("%'");
						ISchoolTreeNodeService schoolTreeNodeService = AppContext.getBean("schoolTreeNodeService", ISchoolTreeNodeService.class);
						final List<SchoolTreeNode> schoolTreeNodeLs = schoolTreeNodeService.getList(whereSql.toString());
						//						int schoolTreeNodeCount = uploadData(schoolTreeNodeLs, "/UploadSchoolTreeNode", "学校班级");
						uploadData(request, schoolTreeNodeLs, "SchoolTreeNode");
						updateProgressPanel(5, schoolTreeNodeLs.size() + "条学校班级记录转换完成，准备上传。");

						whereSql.setLength(0);
						whereSql.append("where (status is null or status = 'T') and schoolNo = '").append(schoolBh).append("'");
						IStudentService studentService = AppContext.getBean("studentService", IStudentService.class);
						final List<Student> studentLs = studentService.getList(whereSql.toString());
						//						int studentCount = uploadData(studentLs, "/UploadStudent", "学生");
						uploadData(request, studentLs, "Student");
						updateProgressPanel(10, studentLs.size() + "条学生记录转换完成，准备上传。");

						ICheckResultService resultService = AppContext.getBean("checkResultService", ICheckResultService.class);
						final List<CheckResult> checkResultLs = resultService.getBySchool(schoolBh, year, term);
						//TODO 上传前先检查数据是否有误
						//						int checkResultCount = uploadData(checkResultLs, "/UploadCheckResult", "体检结果");
						uploadLog(year, schoolBh, schoolName, checkResultLs.size());
						uploadData(request, checkResultLs, "CheckResult");
						updateProgressPanel(15, checkResultLs.size() + "条体检结果记录转换完成，准备上传。");

						IRptTbAgeService rptTbAgeService = AppContext.getBean("rptTbAgeService", IRptTbAgeService.class);
						final List<RptTbAge> rptTbAgeLs = rptTbAgeService.getBySchoolBh(schoolBh, year);
						//						int rptTbAgeCount = uploadData(rptTbAgeLs, "/UploadRptTbAge", "统计表1");
						uploadData(request, rptTbAgeLs, "RptTbAge");
						updateProgressPanel(20, rptTbAgeLs.size() + "条统计表1记录转换完成，准备上传。");

						IRptTbGradeService rptTbGradeService = AppContext.getBean("rptTbGradeService", IRptTbGradeService.class);
						final List<RptTbGrade> rptTbGradeLs = rptTbGradeService.getBySchoolBh(schoolBh, year);
						//						int rptTbGradeCount = uploadData(rptTbGradeLs, "/UploadRptTbGrade", "统计表2");
						uploadData(request, rptTbGradeLs, "RptTbGrade");
						updateProgressPanel(25, rptTbGradeLs.size() + "条统计表2记录转换完成，准备上传。");

						IRptZbAgeService rptZbAgeService = AppContext.getBean("rptZbAgeService", IRptZbAgeService.class);
						final List<RptZbAge> rptZbAgeLs = rptZbAgeService.getBySchoolBh(schoolBh, year);
						//						int rptZbAgeCount = uploadData(rptZbAgeLs, "/UploadRptZbAge", "统计表3");
						uploadData(request, rptZbAgeLs, "RptZbAge");
						updateProgressPanel(30, rptZbAgeLs.size() + "条统计表3记录转换完成，准备上传。");

						IRptZbGradeService rptZbGradeService = AppContext.getBean("rptZbGradeService", IRptZbGradeService.class);
						final List<RptZbGrade> rptZbGradeLs = rptZbGradeService.getBySchoolBh(schoolBh, year);
						//						int rptZbGradeCount = uploadData(rptZbGradeLs, "/UploadRptZbGrade", "统计表4");
						uploadData(request, rptZbGradeLs, "RptZbGrade");
						updateProgressPanel(35, rptZbGradeLs.size() + "条统计表4记录转换完成，准备上传。");

						Response response = request.send();
						logger.info(response.getRetMsg());
						writeUploadLog(year, term, schoolBh, username, new Date());
						progressPanel.dispose();
						if (response.getRetCode() == ResponseUtils.RETCODE_OK) {
							JOptionPane.showMessageDialog(UploadPanel.this, response.getRetMsg());
						} else {
							logger.error("上传失败，请联系管理员：" + response.getRetMsg());
							JOptionPane.showMessageDialog(UploadPanel.this, "上传失败，请联系管理员：" + response.getRetMsg(), "上传失败", JOptionPane.ERROR_MESSAGE);
						}
						//						final StringBuilder msg = new StringBuilder();
						//						msg.append("成功上传 ");
						//						msg.append(schoolTreeNodeCount).append(" 条学校班级记录； ");
						//						msg.append(studentCount).append(" 条学生记录； ");
						//						msg.append(checkResultCount).append(" 条体检结果记录； ");
						//						msg.append(rptTbAgeCount + rptTbGradeCount + rptZbAgeCount + rptZbGradeCount).append(" 条统计记录！");

					} catch (Exception e) {
						ExceptionUtils.writeExceptionLog(logger, e);
						JOptionPane.showMessageDialog(UploadPanel.this, "数据上传失败！" + e.getMessage());
						progressPanel.dispose();
					}
					return;
				}
			});

			progressPanel.setVisible(true);

		} catch (ConnectionException ex) {
			ExceptionUtils.writeExceptionLog(logger, ex);
			JOptionPane.showMessageDialog(this, "连接失败！");
		} catch (RequestException ex) {
			ExceptionUtils.writeExceptionLog(logger, ex);
			JOptionPane.showMessageDialog(this, ex.getMessage());
		}

	}//GEN-LAST:event_btnUploadActionPerformed

	/**
	 * 上传上传记录数量的日志
	 * @author house
	 * @email yyh2001@gmail.com
	 * @since Nov 24, 2013
	 * @param year
	 * @param schoolCode
	 * @param recordCount
	 * @throws RequestException
	 * @throws ConnectionException
	 */
	private void uploadLog(String year, String schoolCode, String schoolName, int recordCount) throws ConnectionException, RequestException {
		Request req = new Request("/UploadJSON");
		JsonObject json = new JsonObject();
		json.addProperty("type", "uploadLog");
		json.addProperty("year", year);
		json.addProperty("schoolCode", schoolCode);
		json.addProperty("schoolName", schoolName);
		json.addProperty("uploadCount", recordCount);
		req.setParam("json", json.toString());
		Response resp = req.send();
		logger.info("Upload log [" + year + ", " + schoolCode + ", " + recordCount + "] " + resp.getRetMsg());
	}

	public int uploadData(Request request, List<? extends CoreEntity> dataLs, String key) throws ConnectionException, RequestException {
		String json = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create().toJson(dataLs);
		request.setParam(key, json);
		return dataLs.size();
	}

	private void updateProgressPanel(final int progress, final String message) {
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				logger.info(message);
				progressPanel.getProgressBar().setValue(progress);
				progressPanel.getLblDescription().setText(message);
			}
		});
	}

	public int uploadData(List<? extends CoreEntity> dataLs, String url, final String message) throws ConnectionException, RequestException {
		final int count = dataLs.size();
		for (int i = 0; i < count; i++) {
			CoreEntity rs = dataLs.get(i);
			String json = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create().toJson(rs);
			logger.info("Sending json: " + json);
			Request req3 = new Request(url);
			//            req3.setParam("sessionId", sessionId);
			//			req3.setParam(json, json);
			req3.setParam("data", json);
			Response res3 = req3.send();
			logger.info(res3.getRetMsg());
			final int iFinal = i;
			SwingUtilities.invokeLater(new Runnable() {

				@Override
				public void run() {
					progressPanel.getProgressBar().setValue(iFinal * 100 / count);
					progressPanel.getLblDescription().setText("共 " + count + " 条 " + message + " 记录要上传，已上传 " + iFinal + " 条。");
				}
			});

		}
		return count;
	}

	public int uploadData_todo(List<? extends CoreEntity> dataLs, String url, final String message) throws ConnectionException, RequestException {
		final int count = dataLs.size();
		Type typeOfSrc = new TypeToken<Collection<CoreEntity>>() {
		}.getType();
		new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create().toJson(dataLs, typeOfSrc);
		for (int i = 0; i < count; i++) {
			CoreEntity rs = dataLs.get(i);
			String json = new GsonBuilder().setDateFormat("yyyy-MM-dd HH:mm:ss").create().toJson(rs);
			logger.info("Sending json: " + json);
			Request req3 = new Request(url);
			//            req3.setParam("sessionId", sessionId);
			req3.setParam(json, json);
			req3.setParam("data", json);
			Response res3 = req3.send();
			logger.info(res3.getRetMsg());
			final int iFinal = i;
			SwingUtilities.invokeLater(new Runnable() {

				@Override
				public void run() {
					progressPanel.getProgressBar().setValue(iFinal * 100 / count);
					progressPanel.getLblDescription().setText("共 " + count + " 条 " + message + " 记录要上传，已上传 " + iFinal + " 条。");
				}
			});

		}
		return count;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JComboBox cmbSchoolTerm;
	private javax.swing.JLabel lblUser;
	private javax.swing.JLabel lblPassword;
	private javax.swing.JLabel lblSchool;
	private javax.swing.JPanel centerPanel;
	private javax.swing.JPasswordField txtPassword;
	private JSelectorBox selSchoolRange;
	private javax.swing.JTextField txtUser;
	private Panel panel;
	// End of variables declaration//GEN-END:variables
}
